##Gate Controller Firmware V2.0

esphome:
  name: gate-controller
  friendly_name: Gate

esp32:
  board: esp32-c3-devkitm-1
  variant: esp32c3
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: #enter your WiFi SSID here
  password: #enter your WiFi pass here
  manual_ip:
    static_ip: #enter your designated IP for the esp32
    gateway: #enter the IP of your router
    subnet: 255.255.252.0
    dns1: 8.8.8.8

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Gate Hotspot"
    password: "C6od8r06E3Q2"

captive_portal:

globals:
  - id: last_gate_command
    type: std::string
    restore_value: false
    initial_value: '"unknown"'

#————————————————————
# 1) Gate Trigger (output only, no logic here)
#————————————————————
switch:
  - platform: gpio
    pin: GPIO4
    id: gate_switch
    name: "Gate Switch"
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: 500ms                # pulse length
      - switch.turn_off: gate_switch

#————————————————————
# 2) Internal Limit Switches (hidden in HA)
#————————————————————
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    id: lsw_open
    internal: true

  - platform: gpio
    pin:
      number: GPIO6
      mode: INPUT_PULLUP
      inverted: true
    id: lsw_closed
    internal: true

#————————————————————
# 3) Shared-line Sensor (triggers logic on any pull-low)
#————————————————————
  - platform: gpio
    pin:
      number: GPIO3
      mode: INPUT_PULLUP
      inverted: true
    id: signal_in
    internal: true
    name: "Gate Trigger Pulse"
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - lambda: |-
            // Decide next command based solely on current limit switches
            bool open = id(lsw_open).state;
            bool closed = id(lsw_closed).state;
            std::string last = id(last_gate_command);
            if (!open && closed) {
              id(last_gate_command) = "open";
            }
            else if (!closed && open) {
              id(last_gate_command) = "close";
            }
            else if (!open && !closed && last == "close") {
              id(last_gate_command) = "close stopped";
            } 
            else if (!closed && !open && last == "open") {
              id(last_gate_command) = "open stopped";
            }
            else if (!closed && !open && last == "close stopped") {
              id(last_gate_command) = "open";
            } 
            else if (!closed && !open && last == "open stopped") {
              id(last_gate_command) = "close";
            }

        - logger.log:
            format: "Gate Triggered: new gate command → %s"
            args: [id(last_gate_command).c_str()]

#————————————————————
# 4) Exposed Gate Status (only this appears in HA)
#————————————————————
text_sensor:
  - platform: template
    name: "Gate Status"
    id: gate_status
    update_interval: 2s
    lambda: |-
      if (id(lsw_open).state && !id(lsw_closed).state) {
        return {"Open"};
      }
      if (id(lsw_closed).state && !id(lsw_open).state) {
        return {"Closed"};
      }
      if (id(last_gate_command) == "open") {
        return {"Opening"};
      }
      if (id(last_gate_command) == "close") {
        return {"Closing"};
      }
      if (id(last_gate_command) == "open stopped" ||
          id(last_gate_command) == "close stopped") {
        return {"Stopped"};
      }
      return {"Unknown"};